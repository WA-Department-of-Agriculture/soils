% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots.R
\name{make_plotly}
\alias{make_plotly}
\title{Make facetted strip plot interactive with \code{plotly}}
\usage{
make_plotly(
  df,
  panel_spacing_x = 6,
  panel_spacing_y = 30,
  font_family = "Poppins",
  primary_color = washi::washi_pal[["standard"]][["red"]],
  secondary_color = washi::washi_pal[["standard"]][["ltgray"]],
  other_color = washi::washi_pal[["standard"]][["tan"]],
  primary_accent_color = washi::washi_pal[["standard"]][["blue"]]
)
}
\arguments{
\item{df}{Dataframe containing columns: \code{category}, \code{abbr_unit}, \code{unit},
\code{dummy}, and \code{sampleLabel}.}

\item{panel_spacing_x, panel_spacing_y}{Spacing between facet panels in units
\code{line} when \code{output = "html"}. Defaults to \code{6} for \code{x} and \code{30} for \code{y} for
rendering in producer reports. These default values seem to look the best
with the dimensions of the plot outputs in the reports. This argument is
used to deal with \code{plotly} issues. See \code{make_plotly()} for examples.}

\item{font_family}{Font family to use throughout plot. Defaults to
\code{"Poppins"}.}

\item{primary_color}{Color of producer's sample points Defaults to WaSHI
green.}

\item{secondary_color}{Color of sample points with \code{"Same crop"} or \code{"Same county"} values in the \code{category} column. Defaults to WaSHI gray.}

\item{other_color}{Color of sample points with \code{"Other fields"} value in
\code{category} column. Defaults to WaSHI tan.}

\item{primary_accent_color}{Color of facet strip background. Defaults to
WaSHI blue.}
}
\value{
Facetted \code{plotly} strip plot.
}
\description{
Wrapper of \code{make_strip_plot()} that adds \code{plotly} interactivity.

NOTE: \code{plotly} has issues with overlapping axis labels when facetting (See
this \href{https://github.com/plotly/plotly.R/issues/1224}{GitHub issue}). The
somewhat hacky solution to getting these plots to look good involves tweaking
the \code{panel_spacing} arguments in \code{ggplot2::theme()}.

If rendering from Mac OS, try setting the \code{panel_spacing_x = 0.01} and
\code{panel_spacing_y = 3}.
}
\examples{
# Read in wrangled plot data.
# See `data_wrangling.R` for processing steps.
path <- soils_example("dfPlot.csv")
df <- read.csv(
  path,
  encoding = "UTF-8"
)

# The data structure necessary to render the df triangle
dplyr::slice_sample(
  df,
  n = 1,
  by = category
) |>
  dplyr::glimpse()

# Make sure class of `category` is `ordered factor` with `Your fields`
# at the end so it is plotted on top of the other points.
df$category <- factor(
  df$category,
  levels = c(
    "Other fields",
    "Same county",
    "Same crop",
    "Your fields"
  ),
  ordered = TRUE
)

class(df$category)

levels(df$category)

# This `plotly` does not look right when viewing outside the reports
make_plotly(
  df,
  font_family = "sans"
)

# Conversely, this `plotly` looks better in this example when
# the `panel_spacing` arguments are modified
make_plotly(
  df,
  panel_spacing_x = 0.01,
  panel_spacing_y = 5,
  font_family = "sans"
)
}
