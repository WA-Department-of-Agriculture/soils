% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots.R
\name{make_strip_plot}
\alias{make_strip_plot}
\title{Make facetted strip plot}
\usage{
make_strip_plot(
  df,
  output,
  panel.spacing.x = 6,
  panel.spacing.y = 30,
  font_family = "Poppins",
  primary_color = washi::washi_pal[["standard"]][["red"]],
  secondary_color = washi::washi_pal[["standard"]][["ltgray"]],
  other_color = washi::washi_pal[["standard"]][["tan"]],
  primary_accent_color = washi::washi_pal[["standard"]][["blue"]]
)
}
\arguments{
\item{df}{Dataframe containing columns: \code{category}, \code{abbr_unit}, \code{unit},
\code{dummy}, and \code{sampleLabel}.}

\item{output}{Type of ouput: either \code{"static"} or \code{"html"}}

\item{panel.spacing.x, panel.spacing.y}{Spacing between facet panels in units
\code{line} when \code{output = "html"}. Defaults to \code{6} for \code{x} and \code{30} for \code{y} for
rendering in producer reports. These default values seem to look the best
with the dimensions of the plot outputs in the reports. This argument is
used to deal with \code{plotly} issues. See \code{make_plotly()} for examples.}

\item{font_family}{Font family to use throughout plot. Defaults to
\code{"Poppins"}.}

\item{primary_color}{Color of producer's sample points Defaults to WaSHI
green.}

\item{secondary_color}{Color of sample points with \code{"Same crop"} or \code{"Same county"} values in the \code{category} column. Defaults to WaSHI gray.}

\item{other_color}{Color of sample points with \code{"Other fields"} value in
\code{category} column. Defaults to WaSHI tan.}

\item{primary_accent_color}{Color of facet strip background. Defaults to
WaSHI blue.}
}
\value{
Facetted \code{ggplot2.} strip plot
}
\description{
\href{https://github.com/WA-Department-of-Agriculture/soils/blob/main/R/data_wrangling.R}{\code{data_wrangling.R}} wrangles the data into the specific structure shown in the below example. Currently, many variables and values are hard-coded into this function. In future work, we hope to broaden this function's flexibility. See the below example for what the input data structure must look like.
}
\examples{
# Install and register Poppins font in R with the `{extrafont}` package.
library(extrafont)

# Read in wrangled plot data
# See `data_wrangling.R` for processing steps
path <- soils_example("dfPlot.csv")
df <- read.csv(
  path,
  encoding = "UTF-8"
)

# The data structure necessary to render the df triangle
dplyr::slice_sample(
  df,
  n = 1,
  by = category
) |>
  dplyr::glimpse()

# Make sure class of `category` is `ordered factor` with `Your fields` at the
# end so it is plotted on top of the other points
df$category <- factor(
  df$category,
  levels = c(
    "Other fields",
    "Same county",
    "Same crop",
    "Your fields"
  ),
  ordered = TRUE
)

class(df$category)

levels(df$category)

# Make the plot
make_strip_plot(df, output = "static")

}
