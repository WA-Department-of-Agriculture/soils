---
title: "![](images/logo.png) Results from [EDIT: PROJECT NAME]"
subtitle: "[EDIT: DATE]"
execute:
  echo: false
  warning: false
  output: true
knitr: 
  opts_chunk:
    dev: "ragg_png"
    tbl.cap: NULL
    ft.align: "left"
format: 
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    link-external-newwindow: true
    embed-resources: true
    css: resources/styles.css
  docx:
    reference-doc: resources/word-template.docx
resource-path: 
  - inst
format-links: false
fig-align: left
fig-width: 6
fig-height: 3.5
fig-dpi: 300
params:
  producerId: WUY05
  year: 2023
---

<!-- Attach soils package, set up paths -->

```{r setup}
library(soils)

# Get output file type
out_type <- knitr::opts_knit$get("rmarkdown.pandoc.to")

# Set path for saving figure output
path <- here::here("figure_output/")

# Create figure output directory if needed
if (!dir.exists(path)) {
  dir.create(path)
}
```

<!-- Load data and dictionary -->

```{r load-data, include=FALSE}
# EDIT: You will need to add your own cleaned lab data to the data
# folder, using 'exampleData.csv' as a template.
#
# 'dataDictionary.csv' must also be updated to match your own
# data set.

# Load lab results
data <- read.csv(
  paste0(here::here(), "/data/exampleData.csv"),
  check.names = FALSE,
  encoding = "UTF-8"
)

assertr::verify(
  data,
  assertr::has_all_names(
    "year",
    "sampleId",
    "farmName",
    "producerName",
    "producerId",
    "fieldName",
    "fieldId",
    "county",
    "crop",
    "texture",
    "longitude",
    "latitude"
  ),
  description = "`data` is missing required columns."
)

# Load data dictionary
dictionary <- read.csv(
  paste0(here::here(), "/data/dataDictionary.csv"),
  check.names = FALSE,
  # set encoding for using subscripts and superscripts
  encoding = "UTF-8"
)

# Check that the `column_names` column of your dictionary match your data column
# names
assertr::assert(
  dictionary,
  assertr::in_set(names(data)),
  column_name,
  description = "Values in `column_name` of `dictionary` must match the column names of `data`."
)

# EDIT: set order of measurement_groups
# this specifies the order of the sections in the report
measurement_groups <- c(
  "physical",
  "biological",
  "chemical",
  "macro",
  "micro"
)

# Check that the above measurement_groups are in the dictionary.
assertr::assert(dictionary, 
                assertr::in_set(measurement_groups),
                measurement_group,
                description = "`dictionary` contains measurement group that isn't defined.")
```

<!-- Set styling variables -->

```{r set-fonts-colors}
# EDIT: Replace any font names and colors to match your branding.

header_font <- "Georgia"
body_font <- "Arial"

# Flextable colors -----------------------------------------------------

# header background color
header_color <- "#023B2C"
# header text color
header_text_color <- "white"
# body darker background color
darker_color <- "#ccc29c"
# body lighter background color
lighter_color <- "#F2F0E6"
# border color
border_color <- "#3E3D3D"

# Map and plot colors -----------------------------------------------------

# point color for producer samples
primary_color <- "#a60f2d"
# point color for samples in same categories as producer
secondary_color <- "#3E3D3D"
# point color for all other samples in project
other_color <- "#ccc29c"

# facet strip background color
strip_color <- "#335c67"
# facet strip text color
strip_text_color <- "white"
```

<!-- Pivot data longer and join with data dictionary -->

```{r tidy-long}
# Tidy data into long format and join with data dictionary
results_long <- data |>
  dplyr::mutate(dplyr::across(dplyr::contains("_"), as.numeric)) |>
  tidyr::pivot_longer(
    cols = dplyr::matches("_|pH"),
    names_to = "measurement"
  ) |>
  dplyr::inner_join(dictionary, by = c("measurement" = "column_name")) |>
  dplyr::arrange(measurement_group, order) |>
  dplyr::mutate(
    abbr = factor(
      abbr,
      levels = dictionary$abbr,
      ordered = is.ordered(dictionary$order)
    ),
    abbr_unit = factor(
      abbr_unit,
      levels = dictionary$abbr_unit,
      ordered = is.ordered(dictionary$order)
    )
  ) |>
  dplyr::filter(!is.na(value))
```

<!-- Get producer info -->

```{r get-producer-info}
# If field name is blank, use field ID
data$fieldName <- ifelse(is.na(data$fieldName), data$fieldId, data$fieldName)

# If farm name is blank, use producer ID
data$farmName <- ifelse(is.na(data$farmName), data$producerId, data$farmName)

# Subset to producer samples
producer_samples <- results_long |>
  dplyr::filter(producerId == params$producerId & year == params$year)

# Extract producer sample IDs, crops, counties, and farm name into
# producer list
producer <- list("sampleId", "crop", "county", "farmName", "measurement") |>
  rlang::set_names() |>
  purrr::map(\(x) soils::pull_unique(
    df = producer_samples,
    target = x
  ))

# In case of multiple farm names, grab first one
producer$farmName <- if (producer$farmName > 1) producer$farmName[[1]]

# Remove measurements that producer did not have tested
results_long <- results_long |>
  dplyr::filter(measurement %in% producer_samples$measurement)
```

<!-- GIS data prep -->

```{r prep-gis-df}
# Prep data for GIS table and map
gis_df <- soils::prep_for_map(
  producer_samples,
  label_heading = fieldName,
  label_body = crop
)
```

<!-- Data wrangling for flextables -->

```{r calculate-averages}
# calculate averages by crop, county, and project
crop_summary <- soils::summarize_by_var(
  results_long,
  producer_samples,
  var = crop
)

county_summary <- soils::summarize_by_var(
  results_long,
  producer_samples,
  var = county
)

project_summary <- soils::summarize_by_project(results_long)
```

```{r combine-producer-and-summaries}
# Combine producer table with summaries

producer_table <- producer_samples |>
  dplyr::select(
    measurement_group,
    abbr,
    value,
    "Field or Average" = fieldName,
    Texture = texture
  )

# Bind together into one df and round values to 2 digits
df_table <- dplyr::bind_rows(
  producer_table,
  crop_summary,
  county_summary,
  project_summary
) |>
  dplyr::mutate(
    value = as.numeric(formatC(value, 2, drop0trailing = TRUE))
  )
```

```{r split-into-groups}
# Split into list with each measurement group as its own df and pivot wider
groups <- df_table |>
  split(df_table$measurement_group) |>
  purrr::map(\(x) {
    tidyr::pivot_wider(
      x,
      id_cols = c("Field or Average", Texture),
      names_from = abbr
    )
  })
```

```{r physical-group-tweaks}
# Special wrangling for texture

# Extract physical df from averages list
physical <- list(physical = groups$physical)

# Remove texture from all dataframes except physical
groups <- purrr::map(
  subset(
    groups,
    !(names(groups) == "physical")
  ),
  \(x) dplyr::select(x, -Texture)
)

# Add physical df back to the averages list
groups <- c(groups, physical)

# Remove this intermediate variable from env
rm(physical)
```

```{r remove-rows-with-one-observation}
# Delete any county or crop averages where n = 1
tables <- groups |>
  purrr::map(
    subset,
    !grepl("(1 Fields)", `Field or Average`)
  )
```

```{r get-headers-for-flextable}
# Map function to each measurement group, resulting in a new df with
# abbreviations and units in a list for make_ft()
headers <- results_long |>
  soils::pull_unique(target = measurement_group) |>
  as.list() |>
  rlang::set_names() |>
  purrr::map(\(group) get_table_headers(dictionary, group))
```

```{r make-flextables}
# Create a list containing a flextable for each measurement group
table_list <- list2DF(
  list(
    table = tables,
    header = headers
  )
) |>
  purrr::pmap(\(table, header) {
    soils::make_ft(table, header) |>
      soils::format_ft_colors(
        lighter_color = lighter_color,
        darker_color = darker_color
      ) |>
      soils::style_ft(
        header_font = header_font,
        body_font = body_font,
        header_color = header_color,
        header_text_color = header_text_color,
        border_color = border_color
      ) |>
      soils::unit_hline(header = header) |>
      flextable::set_table_properties(layout = "autofit")
  })
```

<!-- Plots -->

```{r prep-df-plot}
# Prep df for add_texture_points() and make_strip_plot()

df_plot <- results_long |>
  dplyr::mutate(
    # Dummy column to set x-axis in same place for each facet
    dummy = "dummy",
    # Set category to group samples
    category = dplyr::case_when(
      sampleId %in% producer$sampleId ~ "Your fields",
      crop %in% producer$crop ~ "Same crop",
      county %in% producer$county ~ "Same county",
      .default = "Other fields"
    ),
    # Set category factors so producer samples are plotted last
    category = factor(
      category,
      levels = c("Your fields", "Same crop", "Same county", "Other fields")
    ),
    # Label for tooltip
    label = dplyr::case_when(
      category == "Your fields" ~ glue::glue(
        "{fieldName}<br>{crop}<br>{value} {unit}"
      ),
      .default = glue::glue(
        "{county}<br>",
        "{crop}<br>",
        "{value} {unit}"
      )
    )
  )

# Order the df so producer's points are plotted on top
df_plot <- df_plot[order(df_plot$category, decreasing = TRUE), ]
```

```{r prep-texture-triangle-df}
# Select only the texture variables from the plot df and pivot so each texture
# is in its own column
triangle_df <- df_plot |>
  subset(abbr %in% c("Sand", "Silt", "Clay")) |>
  tidyr::pivot_wider(
    id_cols = c(
      sampleId,
      category
    ),
    names_from = measurement
  )
```

```{r make-texture-triangle}
# Create the texture triangle and add the sample points
texture_triangle <- soils::make_texture_triangle(body_font = body_font) +
  soils::add_texture_points(
    triangle_df,
    sand = `sand_%`,
    silt = `silt_%`,
    clay = `clay_%`,
    color = category,
    size = category,
    shape = category,
    alpha = category
  )

# Set the color, size, shape, and alpha scales
texture_triangle <- soils::set_scales(
  texture_triangle,
  primary_color = primary_color,
  secondary_color = secondary_color,
  other_color = other_color
)
```

```{r make-strip-plots}
# Split df_plot into a list with each measurement group in its own plot
plot_list <- df_plot |>
  split(df_plot$measurement_group) |>
  purrr::map(\(group) {
    # Make strip plot
    plot <- soils::make_strip_plot(
      group,
      color = category,
      size = category,
      shape = category,
      alpha = category
    ) |>
      # Set color, size, shape, alpha scales
      soils::set_scales(
        primary_color = primary_color,
        secondary_color = secondary_color,
        other_color = other_color
      ) +
      # Apply facet strip plot theme
      soils::theme_facet_strip(
        body_font = body_font,
        strip_color = strip_color,
        strip_text_color = strip_text_color
      )
  })
```

## `r ifelse(!is.na(producer$farmName), producer$farmName, paste("Farm:", params$producerId))`

{{< include 03_project_summary.qmd >}}

{{< include 04_soil_health_background.qmd >}}

{{< pagebreak >}}

## Your Fields

```{r}
# do not add chunk label due to bug https://github.com/quarto-dev/quarto-cli/issues/3603
gis_df |>
  dplyr::select(
    `Sample ID` = sampleId,
    `Field ID` = fieldId,
    `Field Name` = fieldName,
    Crop = crop,
    Longitude = longitude,
    Latitude = latitude
  ) |>
  flextable::flextable() |>
  soils::style_ft(
    header_font = header_font,
    body_font = body_font,
  ) |>
  flextable::set_table_properties(layout = "autofit")
```

```{r create-map}
map <- soils::make_leaflet(
  gis_df,
  primary_color = primary_color
)
```

```{r save-map}
if (requireNamespace("htmlwidgets", quietly = TRUE) &
  requireNamespace("webshot2", quietly = TRUE)) {
  invisible(htmlwidgets::saveWidget(
    map,
    file = paste0(path, "/map.html")
  ))
  invisible(webshot2::webshot(
    url = paste0(path, "/map.html"),
    file = paste0(path, "/map.png"),
  ))
}
```

```{r map-html}
#| eval: !expr out_type == "html"
map
```

```{r map-static}
#| eval: !expr out_type == "docx"
#| out-width: 6in
if (fs::file_exists(glue::glue("{path}/map.png"))) {
  knitr::include_graphics(
    glue::glue("{path}/map.png")
  )
}
```

{{< pagebreak >}}

## Project Results

Below are tables and graphs describing the physical, biological, and chemical measurements from your soils. Each point represents a sample we collected. Take a look to see how your fields compare to others in the project. All samples were collected from \[EDIT: SOIL DEPTH (e.g. 0-6 inches, or 0-30 cm)\].

```{r create-measurement-group-sections}
#| output: asis
sections <- purrr::map_chr(measurement_groups, \(group) {
  knitr::knit_child(
    input = "02_section_template.qmd",
    envir = environment(),
    quiet = TRUE
  )
})

cat(sections, sep = "\n")
```

```{r download-data-text}
#| eval: !expr out_type == "html"
#| results: asis
if (requireNamespace("downloadthis", quietly = TRUE)) {
  cat("## Download your data")
}
```

```{r download-data}
#| eval: !expr out_type == "html"
if (requireNamespace("downloadthis", quietly = TRUE)) {
  list(
    results = subset(data, producerId == params$producerId),
    measurement_dictionary = dictionary[
      ,
      c(
        "column_name",
        "measurement_full_name",
        "abbr",
        "unit"
      )
    ]
  ) |>
    downloadthis::download_this(
      output_name = glue::glue("{params$year}_soils_data"),
      output_extension = ".xlsx",
      button_label = "Download as Excel spreadsheet",
      button_type = "success"
    )
}
```

## Looking Forward

{{< include 08_looking_forward.qmd >}}

<!-- Please do not remove the acknowledgement. -->

## Acknowledgement

{{< include 09_acknowledgement.qmd >}}
